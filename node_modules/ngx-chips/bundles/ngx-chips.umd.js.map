{
  "version": 3,
  "file": "ngx-chips.umd.js",
  "sources": [
    "ng://ngx-chips/modules/components/tag-input/tag-input.ts",
    "ng://ngx-chips/modules/components/tag-input/animations.ts",
    "ng://ngx-chips/modules/components/tag/tag.component.ts",
    "ng://ngx-chips/modules/components/tag/tag-ripple.component.ts",
    "ng://ngx-chips/modules/components/tag-input-form/tag-input-form.component.ts",
    "ng://ngx-chips/modules/core/helpers/listen.ts",
    "ng://ngx-chips/modules/core/accessor.ts",
    "ng://ngx-chips/modules/core/providers/options-provider.ts",
    "ng://ngx-chips/modules/defaults.ts",
    "ng://ngx-chips/modules/components/dropdown/tag-input-dropdown.component.ts",
    "ng://ngx-chips/modules/core/constants/index.ts",
    "ng://ngx-chips/modules/core/pipes/highlight.pipe.ts"
  ],
  "sourcesContent": [
    "// angular\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit,\n    Type\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { debounceTime, filter, map, first } from 'rxjs/operators';\n\n// ng2-tag-input\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\nimport { listen } from '../../core/helpers/listen';\nimport * as constants from '../../core/constants';\n\nimport { DragProvider, DraggedTag } from '../../core/providers/drag-provider';\nimport { OptionsProvider } from '../../core/providers/options-provider';\n\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\nimport { TagComponent } from '../tag/tag.component';\n\nimport { animations } from './animations';\nimport { TagInputOptions } from '../../defaults';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst DragEvent = (global as any).DragEvent;\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\nconst defaults: Type<TagInputOptions> = forwardRef(() => OptionsProvider.defaults.tagInput);\n\n@Component({\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styles: [`.dark tag:focus {\n  -webkit-box-shadow: 0 0 0 1px #323232;\n          box-shadow: 0 0 0 1px #323232; }\n\n.ng2-tag-input.bootstrap3-info {\n  background-color: #fff;\n  display: inline-block;\n  color: #555;\n  vertical-align: middle;\n  max-width: 100%;\n  height: 42px;\n  line-height: 44px; }\n\n.ng2-tag-input.bootstrap3-info input {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  outline: none;\n  background-color: transparent;\n  padding: 0 6px;\n  margin: 0;\n  width: auto;\n  max-width: inherit; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder {\n  color: #777;\n  opacity: 1; }\n\n.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info input:focus {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused {\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n  border: 1px solid #ccc; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n  -webkit-box-shadow: inset 0 1px 1px #d9534f;\n          box-shadow: inset 0 1px 1px #d9534f; }\n\n.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  -webkit-transition: all 0.25s;\n  transition: all 0.25s;\n  padding: 0.25rem 0;\n  min-height: 32px;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .ng2-tag-input:focus {\n    outline: 0; }\n  .ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #2196F3; }\n  .ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #f44336; }\n  .ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .ng2-tag-input form {\n    margin: 0.1em 0; }\n  .ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.minimal.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 1px solid transparent; }\n  .minimal.ng2-tag-input:focus {\n    outline: 0; }\n  .minimal.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .minimal.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .minimal.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .minimal.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.dark.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #444; }\n  .dark.ng2-tag-input:focus {\n    outline: 0; }\n  .dark.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .dark.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .dark.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .dark.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .bootstrap.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #0275d8; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #d9534f; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap3-info.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  padding: 4px;\n  cursor: text;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  border-radius: 4px; }\n  .bootstrap3-info.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 1px solid #d9534f; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap3-info.ng2-tag-input form {\n    margin: 0.1em 0; }\n  .bootstrap3-info.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.error-message {\n  font-size: 0.8em;\n  color: #f44336;\n  margin: 0.5em 0 0 0; }\n\n.bootstrap .error-message {\n  color: #d9534f; }\n\n.progress-bar, .progress-bar:before {\n  height: 2px;\n  width: 100%;\n  margin: 0; }\n\n.progress-bar {\n  background-color: #2196F3;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  position: absolute;\n  bottom: 0; }\n\n.progress-bar:before {\n  background-color: #82c4f8;\n  content: '';\n  -webkit-animation: running-progress 2s cubic-bezier(0.4, 0, 0.2, 1) infinite;\n  animation: running-progress 2s cubic-bezier(0.4, 0, 0.2, 1) infinite; }\n\n@-webkit-keyframes running-progress {\n  0% {\n    margin-left: 0;\n    margin-right: 100%; }\n  50% {\n    margin-left: 25%;\n    margin-right: 0; }\n  100% {\n    margin-left: 100%;\n    margin-right: 0; } }\n\n@keyframes running-progress {\n  0% {\n    margin-left: 0;\n    margin-right: 100%; }\n  50% {\n    margin-left: 25%;\n    margin-right: 0; }\n  100% {\n    margin-left: 100%;\n    margin-right: 0; } }\n\ntag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  font-family: \"Roboto\", \"Helvetica Neue\", sans-serif;\n  font-weight: 400;\n  font-size: 1em;\n  letter-spacing: 0.05rem;\n  color: #444;\n  border-radius: 16px;\n  -webkit-transition: all 0.3s;\n  transition: all 0.3s;\n  margin: 0.1rem 0.3rem 0.1rem 0;\n  padding: 0.08rem 0.45rem;\n  height: 32px;\n  line-height: 34px;\n  background: #efefef;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  tag:not(.readonly):not(.tag--editing):focus {\n    background: #2196F3;\n    color: #fff; }\n  tag:not(.readonly):not(.tag--editing):active {\n    background: #0d8aee;\n    color: #fff; }\n  tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #e2e2e2;\n    color: initial; }\n  tag.readonly {\n    cursor: default; }\n  tag.readonly:focus, tag:focus {\n    outline: 0; }\n  tag.tag--editing {\n    background-color: #fff;\n    border: 1px solid #ccc;\n    cursor: text; }\n\n.minimal tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  border-radius: 0;\n  background: #f9f9f9;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  .minimal tag:not(.readonly):not(.tag--editing):focus {\n    background: #d0d0d0;\n    color: initial; }\n  .minimal tag:not(.readonly):not(.tag--editing):active {\n    background: #d0d0d0;\n    color: initial; }\n  .minimal tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #ececec; }\n  .minimal tag.readonly {\n    cursor: default; }\n  .minimal tag.readonly:focus, .minimal tag:focus {\n    outline: 0; }\n  .minimal tag.tag--editing {\n    cursor: text; }\n\n.dark tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  color: #f9f9f9;\n  border-radius: 3px;\n  background: #444;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  .dark tag:not(.readonly):not(.tag--editing):focus {\n    background: #efefef;\n    color: #444; }\n  .dark tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #2b2b2b;\n    color: #f9f9f9; }\n  .dark tag.readonly {\n    cursor: default; }\n  .dark tag.readonly:focus, .dark tag:focus {\n    outline: 0; }\n  .dark tag.tag--editing {\n    cursor: text; }\n\n.bootstrap tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  color: #f9f9f9;\n  border-radius: 0.25rem;\n  background: #0275d8;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  .bootstrap tag:not(.readonly):not(.tag--editing):focus {\n    background: #025aa5; }\n  .bootstrap tag:not(.readonly):not(.tag--editing):active {\n    background: #025aa5; }\n  .bootstrap tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #0267bf;\n    color: #f9f9f9; }\n  .bootstrap tag.readonly {\n    cursor: default; }\n  .bootstrap tag.readonly:focus, .bootstrap tag:focus {\n    outline: 0; }\n  .bootstrap tag.tag--editing {\n    cursor: text; }\n\n.bootstrap3-info tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  font-family: inherit;\n  font-weight: 400;\n  font-size: 95%;\n  color: #fff;\n  border-radius: 0.25em;\n  background: #5bc0de;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative;\n  padding: .25em .6em;\n  text-align: center;\n  white-space: nowrap; }\n  .bootstrap3-info tag:not(.readonly):not(.tag--editing):focus {\n    background: #28a1c5; }\n  .bootstrap3-info tag:not(.readonly):not(.tag--editing):active {\n    background: #28a1c5; }\n  .bootstrap3-info tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #46b8da;\n    color: #fff; }\n  .bootstrap3-info tag.readonly {\n    cursor: default; }\n  .bootstrap3-info tag.readonly:focus, .bootstrap3-info tag:focus {\n    outline: 0; }\n  .bootstrap3-info tag.tag--editing {\n    cursor: text; }\n\n:host {\n  display: block; }\n`],\n    template: `<!-- CONTAINER -->\n\n<div ngClass=\"ng2-tag-input {{ theme || '' }}\"\n     (click)=\"focus(true, false)\"\n     [attr.tabindex]=\"-1\"\n\n     (drop)=\"dragZone ? onTagDropped($event, undefined) : undefined\"\n     (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n     (dragover)=\"dragZone ? onDragOver($event) : undefined\"\n     (dragend)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n     [class.ng2-tag-input--dropping]=\"isDropping()\"\n     [class.ng2-tag-input--disabled]=\"disable\"\n     [class.ng2-tag-input--loading]=\"isLoading\"\n     [class.ng2-tag-input--invalid]=\"hasErrors()\"\n     [class.ng2-tag-input--focused]=\"isInputFocused()\">\n\n    <!-- TAGS -->\n    <div class=\"ng2-tags-container\">\n        <tag *ngFor=\"let item of items; let i = index; trackBy: trackBy\"\n\n             (onSelect)=\"selectItem(item)\"\n             (onRemove)=\"onRemoveRequested(item, i)\"\n             (onKeyDown)=\"handleKeydown($event)\"\n             (onTagEdited)=\"onTagEdited.emit($event)\"\n             (onBlur)=\"onTagBlurred($event, i)\"\n             draggable=\"{{ editable }}\"\n\n             (dragstart)=\"dragZone ? onDragStarted($event, item, i) : undefined\"\n             (drop)=\"dragZone ? onTagDropped($event, i) : undefined\"\n             (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n             (dragover)=\"dragZone ? onDragOver($event, i) : undefined\"\n             (dragleave)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n             [attr.tabindex]=\"0\"\n             [disabled]=\"disable\"\n             [@animation]=\"animationMetadata\"\n             [hasRipple]=\"ripple\"\n             [index]=\"i\"\n             [removable]=\"removable\"\n             [editable]=\"editable\"\n             [displayBy]=\"displayBy\"\n             [identifyBy]=\"identifyBy\"\n             [template]=\"!!hasCustomTemplate() ? templates.first : undefined\"\n             [draggable]=\"dragZone\"\n             [model]=\"item\">\n        </tag>\n\n        <tag-input-form\n            (onSubmit)=\"onAddingRequested(false, formValue)\"\n            (onBlur)=\"blur()\"\n            (click)=\"dropdown ? dropdown.show() : undefined\"\n            (onKeydown)=\"fireEvents('keydown', $event)\"\n            (onKeyup)=\"fireEvents('keyup', $event)\"\n\n            [(inputText)]=\"inputText\"\n            [disabled]=\"disable\"\n            [validators]=\"validators\"\n            [asyncValidators]=\"asyncValidators\"\n            [hidden]=\"maxItemsReached\"\n            [placeholder]=\"items.length ? placeholder : secondaryPlaceholder\"\n            [inputClass]=\"inputClass\"\n            [inputId]=\"inputId\"\n            [tabindex]=\"tabindex\">\n        </tag-input-form>\n    </div>\n\n    <div class=\"progress-bar\" *ngIf=\"isLoading\"></div>\n</div>\n\n<!-- ERRORS -->\n<div *ngIf=\"hasErrors()\" class=\"error-messages {{ theme || '' }}\">\n    <p *ngFor=\"let error of inputForm.getErrorMessages(errorMessages)\" class=\"error-message\">\n        <span>{{ error }}</span>\n    </p>\n</div>\n\n<ng-content></ng-content>\n`,\n    animations\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     */\n    @Input() public separatorKeys: string[] = new defaults().separatorKeys;\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     */\n    @Input() public separatorKeyCodes: number[] = new defaults().separatorKeyCodes;\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     */\n    @Input() public placeholder: string = new defaults().placeholder;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     */\n    @Input() public secondaryPlaceholder: string = new defaults().secondaryPlaceholder;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     */\n    @Input() public maxItems: number = new defaults().maxItems;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public validators: ValidatorFn[] = new defaults().validators;\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = new defaults().asyncValidators;\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    */\n    @Input() public onlyFromAutocomplete = new defaults().onlyFromAutocomplete;\n\n\t/**\n     * @name errorMessages\n     */\n    @Input() public errorMessages: { [key: string]: string } = new defaults().errorMessages;\n\n    /**\n     * @name theme\n     */\n    @Input() public theme: string = new defaults().theme;\n\n    /**\n     * @name onTextChangeDebounce\n     */\n    @Input() public onTextChangeDebounce = new defaults().onTextChangeDebounce;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() public inputId: string = new defaults().inputId;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() public inputClass: string = new defaults().inputClass;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() public clearOnBlur: boolean = new defaults().clearOnBlur;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() public hideForm: boolean = new defaults().hideForm;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() public addOnBlur: boolean = new defaults().addOnBlur;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() public addOnPaste: boolean = new defaults().addOnPaste;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() public pasteSplitPattern = new defaults().pasteSplitPattern;\n\n    /**\n     * @name blinkIfDupe\n     */\n    @Input() public blinkIfDupe = new defaults().blinkIfDupe;\n\n    /**\n     * @name removable\n     */\n    @Input() public removable = new defaults().removable;\n\n    /**\n     * @name editable\n     */\n    @Input() public editable: boolean = new defaults().editable;\n\n    /**\n     * @name allowDupes\n     */\n    @Input() public allowDupes = new defaults().allowDupes;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     */\n    @Input() public modelAsStrings = new defaults().modelAsStrings;\n\n    /**\n     * @name trimTags\n     */\n    @Input() public trimTags = new defaults().trimTags;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     */\n    @Input() public ripple: boolean = new defaults().ripple;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex: string = new defaults().tabIndex;\n\n    /**\n     * @name disable\n     */\n    @Input() public disable: boolean = new defaults().disable;\n\n    /**\n     * @name dragZone\n     */\n    @Input() public dragZone: string = new defaults().dragZone;\n\n    /**\n     * @name onRemoving\n     */\n    @Input() public onRemoving = new defaults().onRemoving;\n\n    /**\n     * @name onAdding\n     */\n    @Input() public onAdding = new defaults().onAdding;\n\n    /**\n     * @name animationDuration\n     */\n    @Input() public animationDuration = new defaults().animationDuration;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    @ContentChild(TagInputDropdown) public dropdown: TagInputDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\n\n\t/**\n     * @name inputForm\n     */\n    @ViewChild(TagInputForm) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     */\n    public selectedTag: TagModel | undefined;\n\n    /**\n     * @name isLoading\n     */\n    public isLoading = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     */\n    public inputTextValue = '';\n\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindexAttr(): string {\n        return this.tabindex !== '' ? '-1' : '';\n    }\n\n    /**\n     * @name animationMetadata\n     */\n    public animationMetadata: { value: string, params: object };\n\n    constructor(private readonly renderer: Renderer2,\n                public readonly dragProvider: DragProvider) {\n        super();\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n\t    // Setting editable to false to fix problem with tags in IE still being editable when\n\t    // onlyFromAutocomplete is true\n\t\tthis.editable = this.onlyFromAutocomplete ? false : this.editable;\n\n        this.setAnimationMetadata();\n    }\n\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    public onRemoveRequested(tag: TagModel, index: number): void {\n        const subscribeFn = (model: TagModel) => this.removeItem(model, index);\n\n        this.onRemoving ?\n            this.onRemoving(tag).pipe(first())\n                .subscribe(subscribeFn) : subscribeFn(tag);\n    }\n\n    /**\n     * @name onAddingRequested\n     * @param fromAutocomplete {boolean}\n     * @param tag {TagModel}\n     */\n    public onAddingRequested(fromAutocomplete: boolean, tag: TagModel, index?: number): void {\n        if (!tag) {\n            return;\n        }\n\n        const subscribeFn = (model: TagModel) => {\n            return this.addItem(fromAutocomplete, model, index);\n        }\n\n        this.onAdding ?\n            this.onAdding(tag).pipe(first())\n                .subscribe(subscribeFn) : subscribeFn(tag);\n    }\n\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        this.items = [\n            ...items.slice(0, index),\n            model,\n            ...items.slice(index, items.length)\n        ];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     */\n    public createTag = (model: TagModel): TagModel => {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    public selectItem(item: TagModel | undefined, emit = true): void {\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\n\n        if (isReadonly || this.selectedTag === item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    const index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.moveToTag(data.model, constants.PREV);\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n            case constants.ACTIONS_KEYS.TAB:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    /**\n     * @name setInputValue\n     * @param value\n     */\n    public setInputValue(value: string): void {\n        const control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(value);\n    }\n\n    /**\n     * @name getControl\n     */\n    private getControl(): FormControl {\n        return <FormControl>this.inputForm.value;\n    }\n\n\t/**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    }\n\n\t/**\n     * @name blur\n     */\n    public blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const template = this.templates ? this.templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return Boolean(template && template !== menuTemplate);\n    }\n\n\t/**\n     * @name maxItemsReached\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     */\n    public get formValue(): string {\n        const form = this.inputForm.value;\n\n        return form ? form.value : '';\n    }\n\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    public onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\n        event.stopPropagation();\n\n        const item = { zone: this.dragZone, tag, index } as DraggedTag;\n\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({dragging: true, index});\n    }\n\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    public onDragOver(event: DragEvent, index?: number): void {\n        this.dragProvider.setState({dropping: true});\n        this.dragProvider.setReceiver(this);\n\n        event.preventDefault();\n    }\n\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    public onTagDropped(event: DragEvent, index: number): void {\n        const item = this.dragProvider.getDraggedItem(event);\n\n        if (item.zone !== this.dragZone) {\n            return;\n        }\n\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @name isDropping\n     */\n    public isDropping(): boolean {\n        const isReceiver = this.dragProvider.receiver === this;\n        const isDropping = this.dragProvider.getState('dropping');\n\n        return Boolean(isReceiver && isDropping);\n    }\n\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    public onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n\n    /**\n     * @name trackBy\n     * @param item\n     */\n    public trackBy(item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    private isTagValid(tag: TagModel, fromAutocomplete = false): boolean {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n\n        if (selectedItem && !fromAutocomplete) {\n            return false;\n        }\n\n        const dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const model = this.tags.find(tag => {\n                return this.getItemValue(tag.model) === this.getItemValue(dupe);\n            });\n\n            if (model) {\n                model.blink();\n            }\n        }\n\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n\n    /**\n     * @name moveToTag\n     * @param item\n     * @param direction\n     */\n    private moveToTag(item: TagModel, direction: string): void {\n        const isLast = this.tags.last.model === item;\n        const isFirst = this.tags.first.model === item;\n        const stopSwitch = (direction === constants.NEXT && isLast) ||\n            (direction === constants.PREV && isFirst);\n\n        if (stopSwitch) {\n            this.focus(true);\n            return;\n        }\n\n        const offset = direction === constants.NEXT ? 1 : -1;\n        const index = this.getTagIndex(item) + offset;\n        const tag = this.getTagAtIndex(index);\n\n        return tag.select.call(tag);\n    }\n\n    /**\n     * @name getTagIndex\n     * @param item\n     */\n    private getTagIndex(item: TagModel): number {\n        const tags = this.tags.toArray();\n\n        return tags.findIndex(tag => tag.model === item);\n    }\n\n    /**\n     * @name getTagAtIndex\n     * @param index\n     */\n    private getTagAtIndex(index: number) {\n        const tags = this.tags.toArray();\n\n        return tags[index];\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    private removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete\n     * @param item\n     */\n    private addItem(fromAutocomplete = false, item: TagModel, index?: number): void {\n        const model = this.getItemDisplay(item);\n\n        /**\n         * @name reset\n         */\n        const reset = (): void => {\n            // reset control and focus input\n            this.setInputValue('');\n\n            // focus input\n            this.focus(true, false);\n        };\n\n        /**\n         * @name validationFilter\n         * @param tag\n         */\n        const validationFilter = (tag: TagModel): boolean => {\n            const isValid = this.isTagValid(tag, fromAutocomplete) && this.inputForm.form.valid;\n\n            if (!isValid) {\n                this.onValidationError.emit(tag);\n            }\n\n            return isValid;\n        };\n\n        /**\n         * @name subscribeFn\n         * @param tag\n         */\n        const subscribeFn = (tag: TagModel): void => {\n            this.appendTag(tag, index);\n\n            // emit event\n            this.onAdd.emit(tag);\n\n            if (!this.dropdown) {\n                return;\n            }\n\n            this.dropdown.hide();\n            this.dropdown.showDropdownIfEmpty ? this.dropdown.show() : undefined;\n        };\n\n        of(model).pipe(\n            first(),\n            filter(() => model.trim() !== ''),\n            map(() => item),\n            map(this.createTag),\n            filter(validationFilter)\n        ).subscribe(subscribeFn, undefined, reset);\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n        const listener = ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n\n            if (hasKeyCode || hasKey) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue);\n            }\n        };\n\n        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        const listener = ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        };\n\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, listener);\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener(): void {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', this.onPasteCallback);\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm.form\n            .valueChanges\n            .pipe(\n                debounceTime(this.onTextChangeDebounce),\n                map(() => this.formValue)\n            )\n            .subscribe((value: string) => this.onTextChange.emit(value));\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        const filterFn = (): boolean => {\n            return !(this.dropdown && this.dropdown.isVisible) && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .pipe(filter(filterFn))\n            .subscribe(() => {\n                if (this.addOnBlur) {\n                    this.onAddingRequested(false, this.formValue);\n                }\n\n                this.setInputValue('');\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel | undefined {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        const id = tag[identifyBy];\n\n        return this.items.find(item => this.getItemValue(item) === id);\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback = (data: ClipboardEvent): void => {\n        const text = data.clipboardData.getData('text/plain');\n\n        text.split(this.pasteSplitPattern)\n            .map(item => this.createTag(item))\n            .forEach(item => this.onAddingRequested(false, item));\n\n        this.onPaste.emit(text);\n\n        setTimeout(() => this.setInputValue(''), 0);\n    }\n\n    /**\n     * @name setAnimationMetadata\n     */\n    private setAnimationMetadata(): void {\n        this.animationMetadata = {\n            value: 'in',\n            params: {...this.animationDuration}\n        };\n    }\n}\n",
    "import {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n/**\n * @name animations\n */\nexport const animations = [\n    trigger('animation', [\n        state('in', style({\n            opacity: 1\n        })),\n        state('out', style({\n            opacity: 0\n        })),\n        transition(':enter', [\n            animate(\"{{ enter }}\", keyframes([\n                style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\n                style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\n                style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\n                style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\n                style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\n            ]))\n        ]),\n        transition(':leave', [\n            animate(\"{{ leave }}\", keyframes([\n                style({opacity: 1, transform: 'translateX(0)', offset: 0}),\n                style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n                style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\n            ]))\n        ])\n    ])\n];\n",
    "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    TemplateRef,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    ViewChild,\n    ChangeDetectorRef,\n    Renderer2\n} from '@angular/core';\n\nimport { TagModel } from '../../core/accessor';\nimport { TagRipple } from '../tag/tag-ripple.component';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst KeyboardEvent = (global as any).KeyboardEvent;\nconst MouseEvent = (global as any).MouseEvent;\n\n// mocking navigator\nconst navigator = typeof window !== 'undefined' ? window.navigator : {\n    userAgent: 'Chrome',\n    vendor: 'Google Inc'\n};\n\nconst isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n\n@Component({\n    selector: 'tag',\n    template: `<div (click)=\"select($event)\"\n     (dblclick)=\"toggleEditMode()\"\n     (mousedown)=\"rippleState='clicked'\"\n     (mouseup)=\"rippleState='none'\"\n     [ngSwitch]=\"!!template\"\n     [class.disabled]=\"disabled\"\n     [attr.tabindex]=\"-1\"\n     [attr.aria-label]=\"getDisplayValue(model)\">\n\n    <div *ngSwitchCase=\"true\" [attr.contenteditable]=\"editing\">\n        <!-- CUSTOM TEMPLATE -->\n        <ng-template\n            [ngTemplateOutletContext]=\"{ item: model, index: index }\"\n            [ngTemplateOutlet]=\"template\">\n        </ng-template>\n    </div>\n\n    <div *ngSwitchCase=\"false\" class=\"tag-wrapper\">\n        <!-- TAG NAME -->\n        <div [attr.contenteditable]=\"editing\"\n             [attr.title]=\"getDisplayValue(model)\"\n             class=\"tag__text inline\"\n             spellcheck=\"false\"\n             (keydown.enter)=\"disableEditMode($event)\"\n             (keydown.escape)=\"disableEditMode($event)\"\n             (click)=\"editing ? $event.stopPropagation() : undefined\"\n             (blur)=\"onBlurred($event)\">\n            {{ getDisplayValue(model) }}\n        </div>\n\n        <!-- 'X' BUTTON -->\n        <delete-icon\n            aria-label=\"Remove tag\"\n            role=\"button\"\n            (click)=\"remove($event)\"\n            *ngIf=\"isDeleteIconVisible()\">\n        </delete-icon>\n    </div>\n</div>\n\n<tag-ripple [state]=\"rippleState\"\n            [attr.tabindex]=\"-1\"\n            *ngIf=\"isRippleVisible\">\n</tag-ripple>\n`,\n    styles: [`:host,\n:host > div,\n:host > div:focus {\n  outline: 0;\n  overflow: hidden;\n  -webkit-transition: opacity 1s;\n  transition: opacity 1s;\n  z-index: 1; }\n\n:host {\n  max-width: 400px; }\n\n:host.blink {\n  -webkit-animation: blink 0.3s normal forwards ease-in-out;\n  animation: blink 0.3s normal forwards ease-in-out; }\n\n@-webkit-keyframes blink {\n  0% {\n    opacity: 0.3; } }\n\n@keyframes blink {\n  0% {\n    opacity: 0.3; } }\n\n:host .disabled {\n  cursor: not-allowed; }\n\n:host [contenteditable='true'] {\n  outline: 0; }\n\n.tag-wrapper {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex; }\n\n.tag__text {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n`]\n})\nexport class TagComponent {\n    /**\n     * @name model {TagModel}\n     */\n    @Input() public model: TagModel;\n\n    /**\n     * @name removable {boolean}\n     */\n    @Input() public removable: boolean;\n\n    /**\n     * @name editable {boolean}\n     */\n    @Input() public editable: boolean;\n\n    /**\n     * @name template {TemplateRef<any>}\n     */\n    @Input() public template: TemplateRef<any>;\n\n    /**\n     * @name displayBy {string}\n     */\n    @Input() public displayBy: string;\n\n    /**\n     * @name identifyBy {string}\n     */\n    @Input() public identifyBy: string;\n\n    /**\n     * @name index {number}\n     */\n    @Input() public index: number;\n\n    /**\n     * @name hasRipple\n     */\n    @Input() public hasRipple: boolean;\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled = false;\n\n    /**\n     * @name onSelect\n     */\n    @Output() public onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     */\n    @Output() public onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onKeyDown\n     */\n    @Output() public onKeyDown: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name readonly {boolean}\n     */\n    public get readonly(): boolean {\n        return typeof this.model !== 'string' && this.model.readonly === true;\n    };\n\n    /**\n     * @name editing\n     */\n    public editing = false;\n\n    /**\n     * @name moving\n     */\n    @HostBinding('class.moving') public moving: boolean;\n\n    /**\n     * @name rippleState\n     */\n    public rippleState = 'none';\n\n    /**\n     * @name ripple {TagRipple}\n     */\n    @ViewChild(TagRipple) public ripple: TagRipple;\n\n    constructor(public element: ElementRef,\n                public renderer: Renderer2,\n                private cdRef: ChangeDetectorRef) {}\n\n    /**\n     * @name select\n     */\n    public select($event?: MouseEvent): void {\n        if (this.readonly || this.disabled) {\n            return;\n        }\n\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        this.focus();\n\n        this.onSelect.emit(this.model);\n    }\n\n    /**\n     * @name remove\n     */\n    public remove($event: MouseEvent): void {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    public move(): void {\n        this.moving = true;\n    }\n\n    /**\n     * @name keydown\n     * @param event\n     */\n    @HostListener('keydown', ['$event'])\n    public keydown(event: KeyboardEvent): void {\n        if (this.editing) {\n            event.keyCode === 13 ? this.disableEditMode(event) : undefined;\n            return;\n        }\n\n        this.onKeyDown.emit({event, model: this.model});\n    }\n\n    /**\n     * @name blink\n     */\n    public blink(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('blink');\n\n        setTimeout(() => classList.remove('blink'), 50);\n    }\n\n    /**\n     * @name toggleEditMode\n     */\n    public toggleEditMode(): void {\n        if (this.editable) {\n            this.editing ? undefined : this.activateEditMode();\n        }\n    }\n\n    /**\n     * @name onBlurred\n     * @param event\n     */\n    public onBlurred(event: any): void {\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n\t\tif (!this.editable) {\n\t\t\treturn;\n        }\n\n        this.disableEditMode();\n\n        const value: string = event.target.innerText;\n        const result = typeof this.model === 'string' ? value :\n            {...this.model, [this.displayBy]: value};\n\n        this.onBlur.emit(result);\n    }\n\n    /**\n     * @name getDisplayValue\n     * @param item\n     */\n    public getDisplayValue(item: TagModel): string {\n        return typeof item === 'string' ? item : item[this.displayBy];\n    }\n\n    /**\n     * @desc returns whether the ripple is visible or not\n     * only works in Chrome\n     * @name isRippleVisible\n     */\n    public get isRippleVisible(): boolean {\n        return !this.readonly &&\n            !this.editing &&\n            isChrome &&\n            this.hasRipple;\n    }\n\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    public disableEditMode($event?: KeyboardEvent): void {\n        const classList = this.element.nativeElement.classList;\n        const input = this.getContentEditableText();\n\n        this.editing = false;\n        classList.remove('tag--editing');\n\n        if (!input) {\n            this.setContentEditableText(this.model);\n            return;\n        }\n\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n\n        if ($event) {\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name isDeleteIconVisible\n     */\n    public isDeleteIconVisible(): boolean {\n        return !this.readonly &&\n            !this.disabled &&\n            this.removable &&\n            !this.editing;\n    }\n\n    /**\n     * @name getContentEditableText\n     */\n    private getContentEditableText(): string {\n        const input = this.getContentEditable();\n\n        return input ? input.innerText.trim() : '';\n    }\n\n    /**\n     * @name setContentEditableText\n     * @param model\n     */\n    private setContentEditableText(model: TagModel) {\n        const input = this.getContentEditable();\n        const value = this.getDisplayValue(model);\n\n        input.innerText = value;\n    }\n\n    /**\n     * @name\n     */\n    private activateEditMode(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n\n        this.editing = true;\n    }\n\n    /**\n     * @name storeNewValue\n     * @param input\n     */\n    private storeNewValue(input: string): void {\n        const exists = (model: TagModel) => {\n            return typeof model === 'string' ?\n                model === input :\n                model[this.displayBy] === input;\n        };\n\n        const hasId = () => {\n            return this.model[this.identifyBy] !== this.model[this.displayBy];\n        };\n\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            return;\n        }\n\n        const model = typeof this.model === 'string' ? input :\n            {\n                [this.identifyBy]: hasId() ? this.model[this.identifyBy] : input,\n                [this.displayBy]: input\n            };\n\n        // emit output\n        this.model = model;\n        this.onTagEdited.emit(model);\n    }\n\n    /**\n     * @name getContentEditable\n     */\n    private getContentEditable(): HTMLInputElement {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n    }\n}\n",
    "import {\n    Component,\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    Input\n} from '@angular/core';\n\n@Component({\n    selector: 'tag-ripple',\n    styles: [`\n        :host {\n            width: 100%;\n            height: 100%;\n            left: 0;\n            overflow: hidden;\n            position: absolute;\n        }\n        \n        .tag-ripple {\n            background: rgba(0, 0, 0, 0.1);\n            top: 50%;\n            left: 50%;\n            height: 100%;\n            transform: translate(-50%, -50%);\n            position: absolute;\n        }\n    `],\n    template: `\n        <div class=\"tag-ripple\" [@ink]=\"state\"></div>\n    `,\n    animations: [\n        trigger('ink', [\n            state('none', style({width: 0, opacity: 0})),\n            transition('none => clicked', [\n                animate(300, keyframes([\n                    style({opacity: 1, offset: 0, width: '30%', borderRadius: '100%'}),\n                    style({opacity: 1, offset: 0.5, width: '50%'}),\n                    style({opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px'})\n                ]))\n            ])\n        ])\n    ]\n})\nexport class TagRipple {\n    @Input() public state: string = 'none';\n}\n",
    "import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\n\n@Component({\n    selector: 'tag-input-form',\n    styles: [`.dark tag:focus {\n  -webkit-box-shadow: 0 0 0 1px #323232;\n          box-shadow: 0 0 0 1px #323232; }\n\n.ng2-tag-input.bootstrap3-info {\n  background-color: #fff;\n  display: inline-block;\n  color: #555;\n  vertical-align: middle;\n  max-width: 100%;\n  height: 42px;\n  line-height: 44px; }\n\n.ng2-tag-input.bootstrap3-info input {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  outline: none;\n  background-color: transparent;\n  padding: 0 6px;\n  margin: 0;\n  width: auto;\n  max-width: inherit; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder {\n  color: #777;\n  opacity: 1; }\n\n.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info input:focus {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused {\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n  border: 1px solid #ccc; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n  -webkit-box-shadow: inset 0 1px 1px #d9534f;\n          box-shadow: inset 0 1px 1px #d9534f; }\n\n.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  -webkit-transition: all 0.25s;\n  transition: all 0.25s;\n  padding: 0.25rem 0;\n  min-height: 32px;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .ng2-tag-input:focus {\n    outline: 0; }\n  .ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #2196F3; }\n  .ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #f44336; }\n  .ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .ng2-tag-input form {\n    margin: 0.1em 0; }\n  .ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.minimal.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 1px solid transparent; }\n  .minimal.ng2-tag-input:focus {\n    outline: 0; }\n  .minimal.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .minimal.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .minimal.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .minimal.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.dark.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #444; }\n  .dark.ng2-tag-input:focus {\n    outline: 0; }\n  .dark.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .dark.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .dark.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .dark.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .bootstrap.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #0275d8; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #d9534f; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap3-info.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  padding: 4px;\n  cursor: text;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  border-radius: 4px; }\n  .bootstrap3-info.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 1px solid #d9534f; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap3-info.ng2-tag-input form {\n    margin: 0.1em 0; }\n  .bootstrap3-info.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.error-message {\n  font-size: 0.8em;\n  color: #f44336;\n  margin: 0.5em 0 0 0; }\n\n.bootstrap .error-message {\n  color: #d9534f; }\n\n.ng2-tag-input__text-input {\n  display: inline;\n  vertical-align: middle;\n  border: none;\n  padding: 0 0.5rem;\n  height: 38px;\n  font-size: 1em;\n  font-family: \"Roboto\", \"Helvetica Neue\", sans-serif; }\n  .ng2-tag-input__text-input:focus {\n    outline: 0; }\n  .ng2-tag-input__text-input[disabled=true] {\n    opacity: 0.5;\n    background: #fff; }\n`],\n    template: `<!-- form -->\n<form (submit)=\"submit($event)\" [formGroup]=\"form\">\n    <input #input\n\n           type=\"text\"\n           class=\"ng2-tag-input__text-input\"\n           autocomplete=\"off\"\n           tabindex=\"{{ disabled ? -1 : tabindex ? tabindex : 0 }}\"\n           minlength=\"1\"\n\n           [(ngModel)]=\"inputText\"\n           [formControlName]=\"'item'\"\n           [ngClass]=\"inputClass\"\n           [attr.id]=\"inputId\"\n           [attr.placeholder]=\"placeholder\"\n           [attr.aria-label]=\"placeholder\"\n           [attr.tabindex]=\"tabindex\"\n           [attr.disabled]=\"disabled ? disabled : null\"\n\n           (focus)=\"onFocus.emit($event)\"\n           (blur)=\"onBlur.emit($event)\"\n           (keydown)=\"onKeyDown($event)\"\n           (keyup)=\"onKeyup.emit($event)\"\n    />\n</form>\n`\n})\nexport class TagInputForm {\n    /**\n     * @name onSubmit\n     */\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onFocus\n     */\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeyup\n     */\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeydown\n     */\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\n\n    // inputs\n\n    /**\n     * @name placeholder\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * @name validators\n     */\n    @Input() public validators: ValidatorFn[] = [];\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\n\n    /**\n     * @name inputId\n     */\n    @Input() public inputId: string;\n\n    /**\n     * @name inputClass\n     */\n    @Input() public inputClass: string;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex: string = '';\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled: boolean = false;\n\n    /**\n     * @name inputText\n     * @param text {string}\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name input\n     */\n    @ViewChild('input') public input;\n\n    /**\n     * @name form\n     */\n    public form: FormGroup;\n\n    /**\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @name inputTextValue\n     */\n    public inputTextValue: string = '';\n\n    public ngOnInit() {\n        // creating form\n        this.form = new FormGroup({\n            item: new FormControl({value: '', disabled: this.disabled}, this.validators, this.asyncValidators)\n        });\n    }\n\n\t/**\n     * @name value\n     */\n    public get value(): AbstractControl | null {\n        return this.form.get('item');\n    }\n\n\t/**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return document.activeElement === this.input.nativeElement;\n    }\n\n\t/**\n     * @name getErrorMessages\n     * @param messages\n     */\n    public getErrorMessages(messages): string[] {\n        const value = this.value;\n\n        return value ? Object.keys(messages)\n            .filter(err => value.hasError(err))\n            .map(err => messages[err]) : [];\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        return this.form.dirty &&\n            this.form.value.item &&\n            this.form.invalid;\n    }\n\n\t/**\n     * @name focus\n     */\n    public focus(): void {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.input.nativeElement.blur();\n    }\n\n\t/**\n     * @name getElementPosition\n     */\n    public getElementPosition(): ClientRect {\n        return this.input.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    public destroy(): void {\n        const input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    }\n\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    public onKeyDown($event) {\n        return this.onKeydown.emit($event);\n    }\n\n    /**\n     * @name submit\n     */\n    public submit($event: any): void {\n        this.onSubmit.emit($event);\n    }\n}\n",
    "\n/**\n * @name listen\n * @param listenerType\n * @param action\n * @param condition\n */\nexport function listen(listenerType: string, action: () => any, condition = true): void {\n    // if the event provided does not exist, throw an error\n    if (!this.listeners.hasOwnProperty(listenerType)) {\n        throw new Error('The event entered may be wrong');\n    }\n\n    // if a condition is present and is false, exit early\n    if (!condition) {\n        return;\n    }\n\n    // fire listener\n    this.listeners[listenerType].push(action);\n}\n",
    "import { ControlValueAccessor } from '@angular/forms';\nimport { Input } from '@angular/core';\nimport { OptionsProvider } from './providers/options-provider';\n\nexport class TagModelClass {\n    [key: string]: any;\n}\n\nexport type TagModel = string | TagModelClass;\n\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\n\nexport class TagInputAccessor implements ControlValueAccessor {\n    private _items: TagModel[] = [];\n    private _onTouchedCallback: () => void;\n    private _onChangeCallback: (items: TagModel[]) => void;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\n\n    public get items(): TagModel[] {\n        return this._items;\n    };\n\n    public set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n\n    public onTouched() {\n        this._onTouchedCallback();\n    }\n\n    public writeValue(items: any[]) {\n        this._items = items || [];\n    }\n\n    public registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @name getItemValue\n     * @param item\n     */\n    public getItemValue(item: TagModel): string {\n        return isObject(item) ? item[this.identifyBy] : item;\n    }\n\n    /**\n     * @name getItemDisplay\n     * @param item\n     */\n    public getItemDisplay(item: TagModel): string {\n        return isObject(item) ? item[this.displayBy] : item;\n    }\n\n    /**\n     * @name getItemsWithout\n     * @param index\n     */\n    protected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\n}\n",
    "import { defaults, TagInputOptions, TagInputDropdownOptions } from '../../defaults';\n\nexport type Options = {\n    tagInput?: {\n        [P in keyof TagInputOptions]?: TagInputOptions[P];\n    };\n    dropdown?: {\n        [P in keyof TagInputDropdownOptions]?: TagInputDropdownOptions[P];\n    }\n}\n\nexport class OptionsProvider {\n    public static defaults = defaults;\n\n    public setOptions(options: Options): void {\n        OptionsProvider.defaults.tagInput = {...defaults.tagInput, ...options.tagInput};\n        OptionsProvider.defaults.dropdown = {...defaults.dropdown, ...options.dropdown};\n    }\n}\n\nexport { TagInputDropdownOptions, TagInputOptions };",
    "import { Observable } from 'rxjs/Observable';\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants/index';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagModel } from './core/accessor';\n\nexport interface TagInputOptions {\n    separatorKeys: string[];\n    separatorKeyCodes: number[];\n    maxItems: number;\n    placeholder: string;\n    secondaryPlaceholder: string;\n    validators: ValidatorFn[];\n    asyncValidators: AsyncValidatorFn[];\n    onlyFromAutocomplete: boolean;\n    errorMessages: { [key: string]: string; };\n    theme: string;\n    onTextChangeDebounce: number;\n    inputId: string;\n    inputClass: string;\n    clearOnBlur: boolean;\n    hideForm: boolean;\n    addOnBlur: boolean;\n    addOnPaste: boolean;\n    pasteSplitPattern: string;\n    blinkIfDupe: boolean;\n    removable: boolean;\n    editable: boolean;\n    allowDupes: boolean;\n    modelAsStrings: boolean;\n    trimTags: boolean;\n    ripple: boolean;\n    tabIndex: string;\n    disable: boolean;\n    dragZone: string;\n    onRemoving?: (tag: TagModel) => Observable<TagModel>;\n    onAdding?: (tag: TagModel) => Observable<TagModel>;\n    displayBy: string;\n    identifyBy: string;\n    animationDuration: {\n        enter: string,\n        leave: string\n    };\n}\n\nexport interface TagInputDropdownOptions {\n    displayBy: string;\n    identifyBy: string;\n    appendToBody: boolean;\n    offset: string;\n    focusFirstElement: boolean;\n    showDropdownIfEmpty: boolean;\n    minimumTextLength: number;\n    limitItemsTo: number;\n    keepOpen: boolean;\n    matchingFn: (value: string, target: TagModel) => boolean;\n}\n\nexport const defaults = {\n    tagInput: <TagInputOptions>{\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: Infinity,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: '',\n        inputClass: '',\n        clearOnBlur: false,\n        hideForm: false,\n        addOnBlur: false,\n        addOnPaste: false,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: false,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: '',\n        disable: false,\n        dragZone: '',\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: \"250ms\",\n            leave: \"150ms\"\n        }\n    },\n    dropdown: <TagInputDropdownOptions>{\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: Infinity,\n        keepOpen: true,\n        matchingFn\n    }\n};\n\n/**\n * @name matchingFn\n * @param this\n * @param value\n * @param target\n */\nfunction matchingFn(this: TagInputDropdown, value: string, target: TagModel): boolean {\n    const targetValue = target[this.displayBy].toString();\n\n    return targetValue && targetValue\n        .toLowerCase()\n        .indexOf(value.toLowerCase()) >= 0;\n}\n",
    "import {\n    Component,\n    ContentChildren,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Injector,\n    Input,\n    QueryList,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\n\n// rx\nimport { Observable } from 'rxjs/Observable';\nimport { map, filter, first, debounceTime } from 'rxjs/operators';\n\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { OptionsProvider } from '../../core/providers/options-provider';\nimport { TagInputComponent } from '../tag-input/tag-input';\nimport { TagInputDropdownOptions } from '../../defaults';\nimport { TagModel } from '../../core/accessor';\n\nconst defaults: Type<TagInputDropdownOptions> = forwardRef(() => OptionsProvider.defaults.dropdown);\n\n@Component({\n    selector: 'tag-input-dropdown',\n    template: `<ng2-dropdown>\n    <ng2-dropdown-menu [focusFirstElement]=\"focusFirstElement\"\n                       [appendToBody]=\"appendToBody\"\n                       [offset]=\"offset\">\n        <ng2-menu-item *ngFor=\"let item of items; let index = index; let last = last\"\n                       [value]=\"item\"\n                       [ngSwitch]=\"!!templates.length\">\n\n            <span *ngSwitchCase=\"false\"\n                  [innerHTML]=\"item[displayBy] | highlight : tagInput.inputForm.value.value\">\n            </span>\n\n            <ng-template *ngSwitchDefault\n                      [ngTemplateOutlet]=\"templates.first\"\n                      [ngTemplateOutletContext]=\"{ item: item, index: index, last: last }\">\n            </ng-template>\n        </ng2-menu-item>\n    </ng2-dropdown-menu>\n</ng2-dropdown>\n`\n})\nexport class TagInputDropdown {\n    /**\n     * @name dropdown\n     */\n    @ViewChild(Ng2Dropdown) public dropdown: Ng2Dropdown;\n\n    /**\n     * @name menuTemplate\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name offset\n     */\n    @Input() public offset: string = new defaults().offset;\n\n    /**\n     * @name focusFirstElement\n     */\n    @Input() public focusFirstElement = new defaults().focusFirstElement;\n\n    /**\n     * - show autocomplete dropdown if the value of input is empty\n     * @name showDropdownIfEmpty\n     */\n    @Input() public showDropdownIfEmpty = new defaults().showDropdownIfEmpty;\n\n    /**\n     * @description observable passed as input which populates the autocomplete items\n     * @name autocompleteObservable\n     */\n    @Input() public autocompleteObservable: (text: string) => Observable<any>;\n\n    /**\n     * - desc minimum text length in order to display the autocomplete dropdown\n     * @name minimumTextLength\n     */\n    @Input() public minimumTextLength = new defaults().minimumTextLength;\n\n    /**\n     * - number of items to display in the autocomplete dropdown\n     * @name limitItemsTo\n     */\n    @Input() public limitItemsTo: number = new defaults().limitItemsTo;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy = new defaults().displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy = new defaults().identifyBy;\n\n    /**\n     * @description a function a developer can use to implement custom matching for the autocomplete\n     * @name matchingFn\n     */\n    @Input() public matchingFn: (value: string, target: TagModel) => boolean = new defaults().matchingFn;\n\n    /**\n     * @name appendToBody\n     */\n    @Input() public appendToBody = new defaults().appendToBody;\n\n    /**\n     * @name keepOpen\n     * @description option to leave dropdown open when adding a new item\n     */\n    @Input() public keepOpen = new defaults().keepOpen;\n\n    /**\n     * list of items that match the current value of the input (for autocomplete)\n     * @name items\n     */\n    public items: TagModel[] = [];\n\n    /**\n     * @name tagInput\n     */\n    public tagInput: TagInputComponent = this.injector.get(TagInputComponent);\n\n    /**\n     * @name _autocompleteItems\n     */\n    private _autocompleteItems: TagModel[] = [];\n\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n    public set autocompleteItems(items: TagModel[]) {\n        this._autocompleteItems = items;\n    }\n\n    /**\n     * @name autocompleteItems\n     * @desc array of items that will populate the autocomplete\n     */\n    @Input() public get autocompleteItems(): TagModel[] {\n        const items = this._autocompleteItems;\n\n        if (!items) {\n            return [];\n        }\n\n        return items.map((item: TagModel) => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n    }\n\n    constructor(private readonly injector: Injector) {}\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        this.onItemClicked().subscribe(this.requestAdding);\n\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide().subscribe(this.resetItems);\n\n        const DEBOUNCE_TIME = 200;\n        const KEEP_OPEN = this.keepOpen;\n\n        this.tagInput\n            .onTextChange\n            .asObservable()\n            .pipe(\n                debounceTime(DEBOUNCE_TIME),\n                filter((value: string) => {\n                    if (KEEP_OPEN === false) {\n                        return value.length > 0;\n                    }\n\n                    return true;\n                })\n            )\n            .subscribe(this.show);\n    }\n\n    /**\n     * @name updatePosition\n     */\n    public updatePosition(): void {\n        const position = this.tagInput.inputForm.getElementPosition();\n\n        this.dropdown.menu.updatePosition(position);\n    }\n\n    /**\n     * @name isVisible\n     */\n    public get isVisible(): boolean {\n        return this.dropdown.menu.state.menuState.isVisible;\n    }\n\n    /**\n     * @name onHide\n     */\n    public onHide(): EventEmitter<Ng2Dropdown> {\n        return this.dropdown.onHide;\n    }\n\n    /**\n     * @name onItemClicked\n     */\n    public onItemClicked(): EventEmitter<string> {\n        return this.dropdown.onItemClicked;\n    }\n\n    /**\n     * @name selectedItem\n     */\n    public get selectedItem(): Ng2MenuItem {\n        return this.dropdown.menu.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name state\n     */\n    public get state(): any {\n        return this.dropdown.menu.state;\n    }\n\n    /**\n     *\n     * @name show\n     */\n    public show = (): void => {\n        const maxItemsReached = this.tagInput.items.length === this.tagInput.maxItems;\n        const value = this.getFormValue();\n        const hasMinimumText = value.trim().length >= this.minimumTextLength;\n        const position = this.calculatePosition();\n        const items = this.getMatchingItems(value);\n        const hasItems = items.length > 0;\n        const isHidden = this.isVisible === false;\n        const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\n        const assertions = [];\n\n        const shouldShow = isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n        const shouldHide = this.isVisible && !hasItems;\n\n        if (this.autocompleteObservable && hasMinimumText) {\n            return this.getItemsFromObservable(value);\n        }\n\n        if (!this.showDropdownIfEmpty && !value) {\n            return this.dropdown.hide();\n        }\n\n        if (maxItemsReached) {\n            return this.dropdown.hide();\n        }\n\n        this.setItems(items);\n\n        if (shouldShow) {\n            this.dropdown.show(position);\n        } else if (shouldHide) {\n            this.hide();\n        }\n    }\n\n    /**\n     * @name hide\n     */\n    public hide(): void {\n        this.resetItems();\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name scrollListener\n     */\n    @HostListener('window:scroll')\n    public scrollListener(): void {\n        if (!this.isVisible) {\n            return;\n        }\n\n        this.updatePosition();\n    }\n\n    /**\n     * @name onWindowBlur\n     */\n    @HostListener('window:blur')\n    public onWindowBlur(): void {\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name getFormValue\n     */\n    private getFormValue(): string {\n        return this.tagInput.formValue.trim();\n    }\n\n    /**\n     * @name calculatePosition\n     */\n    private calculatePosition(): ClientRect {\n        return this.tagInput.inputForm.getElementPosition();\n    }\n\n    /**\n     * @name requestAdding\n     * @param item {Ng2MenuItem}\n     */\n    private requestAdding = (item: Ng2MenuItem): void => {\n        this.tagInput.onAddingRequested(true, this.createTagModel(item));\n    }\n\n    /**\n     * @name createTagModel\n     * @param item\n     */\n    private createTagModel(item: Ng2MenuItem): TagModel {\n        const display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        const value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n\n        return {\n            ...item.value,\n            [this.tagInput.displayBy]: display,\n            [this.tagInput.identifyBy]: value\n        };\n    }\n\n    /**\n     *\n     * @param value {string}\n     */\n    private getMatchingItems(value: string): TagModel[] {\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n\n        const dupesAllowed = this.tagInput.allowDupes;\n\n        return this.autocompleteItems.filter((item: TagModel) => {\n            const hasValue: boolean = dupesAllowed ? false : this.tagInput.tags.some(tag => {\n                const identifyBy = this.tagInput.identifyBy;\n                const model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n                return model === item[this.identifyBy];\n            });\n\n            return this.matchingFn(value, item) && (hasValue === false);\n        });\n    }\n\n    /**\n     * @name setItems\n     */\n    private setItems(items: TagModel[]): void {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    }\n\n    /**\n     * @name resetItems\n     */\n    private resetItems = (): void => {\n        this.items = [];\n    }\n\n    /**\n     * @name populateItems\n     * @param data\n     */\n    private populateItems(data: any): TagInputDropdown {\n        this.autocompleteItems = data.map(item => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n\n        return this;\n    }\n\n    /**\n     * @name getItemsFromObservable\n     * @param text\n     */\n    private getItemsFromObservable = (text: string): void => {\n        this.setLoadingState(true);\n\n        const subscribeFn = (data: any[]) => {\n            // hide loading animation\n            this.setLoadingState(false)\n                // add items\n                .populateItems(data);\n\n            this.setItems(this.getMatchingItems(text));\n\n            if (this.items.length) {\n                this.dropdown.show(this.calculatePosition());\n            } else if (!this.showDropdownIfEmpty && this.isVisible) {\n                this.dropdown.hide();\n            } else if (!this.showDropdownIfEmpty) {\n                this.dropdown.hide();\n            }\n        };\n\n        this.autocompleteObservable(text)\n            .pipe(first())\n            .subscribe(subscribeFn, () => this.setLoadingState(false));\n    }\n\n    /**\n     * @name setLoadingState\n     * @param state\n     */\n    private setLoadingState(state: boolean): TagInputDropdown {\n        this.tagInput.isLoading = state;\n\n        return this;\n    }\n}\n",
    "/*\n** constants and default values for <tag-input>\n */\n\nexport const PLACEHOLDER = '+ Tag';\nexport const SECONDARY_PLACEHOLDER = 'Enter a new tag';\nexport const KEYDOWN = 'keydown';\nexport const KEYUP = 'keyup';\nexport const FOCUS = 'focus';\nexport const MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\n\nexport const ACTIONS_KEYS = {\n    DELETE: 'DELETE',\n    SWITCH_PREV: 'SWITCH_PREV',\n    SWITCH_NEXT: 'SWITCH_NEXT',\n    TAB: 'TAB'\n};\n\nexport const KEY_PRESS_ACTIONS = {\n    8: ACTIONS_KEYS.DELETE,\n    37: ACTIONS_KEYS.SWITCH_PREV,\n    39: ACTIONS_KEYS.SWITCH_NEXT,\n    9: ACTIONS_KEYS.TAB\n};\n\nexport const DRAG_AND_DROP_KEY = 'Text';\nexport const NEXT = 'NEXT';\nexport const PREV = 'PREV';\n\n",
    "import {Pipe, PipeTransform} from '@angular/core';\n\nconst escape = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n@Pipe({\n    name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n    /**\n     * @name transform\n     * @param value {string}\n     * @param arg {string}\n     */\n    public transform(value: string, arg: string): string {\n        if (!arg.trim()) {\n            return value;\n        }\n\n        try {\n            const regex = new RegExp(`(${escape(arg)})`, 'i');\n            return value.replace(regex, '<b>$1</b>');\n        } catch (e) {\n            return value;\n        }\n    }\n}\n"
  ],
  "names": [
    "ReactiveFormsModule",
    "NgModule",
    "of",
    "HostBinding",
    "Output",
    "ViewChildren",
    "ContentChildren",
    "TemplateRef",
    "Input",
    "Renderer2",
    "Component",
    "of$1",
    "first",
    "filter",
    "map",
    "constants.ACTIONS_KEYS",
    "style",
    "animate",
    "transition",
    "state",
    "EventEmitter",
    "NG_VALUE_ACCESSOR",
    "style$1",
    "animate$1",
    "keyframes$1",
    "state$1",
    "trigger$1",
    "HostListener",
    "ViewChild",
    "ChangeDetectorRef",
    "Ng2Dropdown",
    "Injector",
    "forwardRef",
    "Pipe",
    "this"
  ],
  "mappings": "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"
}
